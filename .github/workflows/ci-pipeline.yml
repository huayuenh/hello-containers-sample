# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfile
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACE and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to IKS

on:
  workflow_dispatch:
    branches: [ main ]
  push:
    branches: [ "main" ]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBMCLOUD_API_KEY: ${{ secrets.IBMCLOUD_API_KEY }}
  IBMCLOUD_REGION: ${{ vars.IBMCLOUD_REGION }}
  ICR_NAMESPACE: ${{ vars.ICR_NAMESPACE }}
  REGISTRY_HOSTNAME: ${{ vars.ICR_REGION }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  IKS_CLUSTER: ${{ vars.CLUSTER_NAME }}
  DEPLOYMENT_NAME: ${{ vars.IKS_DEPLOYMENT_NAME }}
  RESOURCE_GROUP: ${{ vars.RESOURCE_GROUP }}
  PORT: 8001

jobs:
  setup-build-publish-deploy:
    name: Setup, Test, Build and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:

    - id: checkout
      name: Clone repo
      uses: actions/checkout@v4
  
    - id: unit-test
      name: Run Unit tests
      run: |
        npm install
        npm run test-unit

    - id: build-image
      name: Build image
      uses: redhat-actions/buildah-build@v2
      with:
        image: "${{ vars.ICR_REGION }}/${{ vars.ICR_NAMESPACE }}/${{ vars.IMAGE_NAME }}"
        tags: "${{ github.sha }}"
        containerfiles: |
          ./Dockerfile

    - id: ibmcloud-login
      uses: IBM/actions-ibmcloud-cli@v1
      name: IBMCloud CLI setup and login
      with:
        api_key: ${{ secrets.IBMCLOUD_API_KEY }}   
        region: ${{ vars.IBMCLOUD_REGION }}
        group: ${{ vars.RESOURCE_GROUP }}
        plugins: container-service, container-registry
    - name: ICR login
      run: |
        ibmcloud login --apikey "${IBMCLOUD_API_KEY}" -r "${IBMCLOUD_REGION}" -g ${RESOURCE_GROUP}
        ibmcloud cr region-set "${IBMCLOUD_REGION}"
        ibmcloud cr login


   # - id: icr-login
   #   name: Login into IBMCloud Container Registry
   #   uses: huayuenh/ghacatalog/cr@main

    - name: Push To ICR
      id: push-to-icr
      uses: redhat-actions/push-to-registry@v2
      with:
        #image: ${{ steps.build-image.outputs.image }}
        tags: "${{ steps.build-image.outputs.image }}:${{ steps.build-image.outputs.tags }}"


    - id: va-scan
      name: Check VA result
      uses: huayuenh/ghacatalog/va@main

    - name: Deploy to IKS
      run: |
        ibmcloud target
        ibmcloud ks cluster config --cluster "cd-setup-test-cluster"
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/$DEPLOYMENT_NAME
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o wide

